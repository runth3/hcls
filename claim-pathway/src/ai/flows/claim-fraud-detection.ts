
// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview Fraud detection flow for claims processing.
 *
 * - detectClaimFraud - A function that flags claims with a high probability of fraud using AI.
 * - DetectClaimFraudInput - The input type for the detectClaimFraud function.
 * - DetectClaimFraudOutput - The return type for the detectClaimFraud function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const DetectClaimFraudInputSchema = z.object({
  claimDetails: z
    .string()
    .describe('Detailed information and narrative about the claim, including codes, amounts, and provider information.'),
  medicalRecordSummary: z
    .string()
    .optional()
    .describe('A summary of relevant information from the patient\'s Electronic Medical Record (EMR) or Electronic Health Record (EHR), which may include physician notes, lab results, etc.'),
  memberDetails: z
    .string()
    .describe('Detailed information about the member associated with the claim, including demographics and claim history.'),
  providerDetails: z
    .string()
    .describe('Detailed information about the provider submitting the claim, including type, accreditation, and utilization patterns.'),
});

export type DetectClaimFraudInput = z.infer<typeof DetectClaimFraudInputSchema>;

const DetectClaimFraudOutputSchema = z.object({
  isFraudulent: z.boolean().describe('Whether the claim is likely to be fraudulent, abusive, or wasteful.'),
  fraudProbability: z.number().describe('The probability (0-1) that the claim is fraudulent, abusive, or wasteful.'),
  fraudReason: z.string().describe('The reason why the claim is flagged, explaining the identified pattern (e.g., fraud, abuse, waste, unbundling, overutilization).'),
  recommendedAction: z.string().optional().describe('A recommended action based on the assessment (e.g., "Manual Review Required", "Request Additional Documents").'),
});

export type DetectClaimFraudOutput = z.infer<typeof DetectClaimFraudOutputSchema>;

export async function detectClaimFraud(input: DetectClaimFraudInput): Promise<DetectClaimFraudOutput> {
  return detectClaimFraudFlow(input);
}

const prompt = ai.definePrompt({
  name: 'detectClaimFraudPrompt',
  input: {schema: DetectClaimFraudInputSchema},
  output: {schema: DetectClaimFraudOutputSchema},
  prompt: `You are an expert fraud, abuse, and waste (FWA) detection specialist for medical claims.

You will be provided with details about a claim, the member, the provider, and a summary from the medical record. Your primary task is to identify potential FWA by synthesizing all available information.

Key analysis points:
1.  **Analyze and Correlate Narratives**: Scrutinize the 'claimDetails' and the 'medicalRecordSummary'. Information from a specialist holds more weight than from a GP or nurse. Look for contradictions or confirmations between the claim narrative, the billed codes/procedures, and the medical record. For example, if medical record notes from a specialist state a procedure was not indicated (e.g., 'no signs of fetal distress'), but the claim bills for that procedure, this is a major red flag for abuse.
2.  **Detect Patterns**:
    *   **Fraud**: Look for suspicious patterns like identical, non-standard claim amounts across different patients/providers.
    *   **Abuse/Unbundling**: Identify procedures that are billed separately but should be bundled (e.g., omentectomy during a C-section).
    *   **Waste/Overutilization**: Flag claims where the treatment (e.g., inpatient stay, extensive lab tests) is excessive for the given diagnosis (e.g., a common cold), especially if the medical record summary shows all test results were normal.
3.  **Synthesize All Information**: Combine the narrative analysis with member and provider history to form a conclusion. A provider with a history of upcoding submitting a questionable claim is a higher risk.

Based on this comprehensive analysis, determine if the claim is likely fraudulent/abusive/wasteful, the probability, the specific reason (fraud, abuse, waste), and a recommended action.

Claim Narrative: {{{claimDetails}}}
Medical Record Summary: {{{medicalRecordSummary}}}
Member Details: {{{memberDetails}}}
Provider Details: {{{providerDetails}}}`,
});

const detectClaimFraudFlow = ai.defineFlow(
  {
    name: 'detectClaimFraudFlow',
    inputSchema: DetectClaimFraudInputSchema,
    outputSchema: DetectClaimFraudOutputSchema,
  },
  async input => {
    try {
      const {output} = await prompt(input);
      if (!output) {
        console.error('Genkit prompt returned nullish output for detectClaimFraudFlow');
        return {
          isFraudulent: false,
          fraudProbability: 0,
          fraudReason: "AI fraud detection failed or returned no content.",
          recommendedAction: "Review Manually"
        };
      }
      return output;
    } catch (error) {
      console.error("Error in detectClaimFraudFlow:", error);
      return {
        isFraudulent: false,
        fraudProbability: 0,
        fraudReason: "AI service for fraud detection is currently unavailable. Please try again later.",
        recommendedAction: "Retry AI Analysis Later"
      };
    }
  }
);
